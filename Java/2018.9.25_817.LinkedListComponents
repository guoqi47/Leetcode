We are given head, the head node of a linked list containing unique integer values.

We are also given the list G, a subset of the values in the linked list.

Return the number of connected components in G, where two values are connected if they appear consecutively in the linked list.

Example 1:

Input: 
head: 0->1->2->3
G = [0, 1, 3]
Output: 2
Explanation: 
0 and 1 are connected, so [0, 1] and [3] are the two connected components.
Example 2:

Input: 
head: 0->1->2->3->4
G = [0, 3, 1, 4]
Output: 2
Explanation: 
0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    
    //A避免使用基本数据类型的数组转换为列表,
    //所以遍历检查是存在,可以用set
    public int numComponents(ListNode head, int[] G) {
        int res = 0;
        boolean FLAG = false;
        while(head!=null){
            boolean isin = false;
            for(int i:G){
                if(i==head.val){
                    isin = true;
                    break;
                }
            }
            if(isin && !FLAG){
                FLAG = true;
                res++;
            }else if(!isin){
                FLAG = false;
            }
            head = head.next;
        }
        return res;
    }
    
}
