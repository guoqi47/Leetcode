In a forest, each rabbit has some color. Some subset of rabbits (possibly all of them) tell you how many other rabbits have the same color as them. Those answers are placed in an array.

Return the minimum number of rabbits that could be in the forest.

Examples:
Input: answers = [1, 1, 2]
Output: 5
Explanation:
The two rabbits that answered "1" could both be the same color, say red.
The rabbit than answered "2" can't be red or the answers would be inconsistent.
Say the rabbit that answered "2" was blue.
Then there should be 2 other blue rabbits in the forest that didn't answer into the array.
The smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.

Input: answers = [10, 10, 10]
Output: 11

Input: answers = []
Output: 0

from collections import Counter
class Solution:
    def numRabbits(self, answers):
        """
        :type answers: List[int]
        :rtype: int
        """
        # 这个题没有第一眼看那么简单
        # 涉及到数值和个数，例如[0,0,1,1,1]是6，三个1不能只算两只
        # python 除法：
        # 向下和向上取整函数math.floor, math.ceil
        # 其中，math.floor可写作x // y
        # count0 = 0
        # for i in answers:
        #     if i==0:
        #         count0+=1
        # s = set(answers)
        # return sum(s)+len(s) if count0==0 else sum(s)+len(s)+count0-1
        
        d = dict(Counter(answers)) #Counter的使用及转成dict
        res = 0
        for k, v in d.items(): #dict遍历
            if v<=k+1:
                res+=k+1
            else:
                res+=math.ceil(v/(k+1))*(k+1)
        return res
            
                
            
                
