Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]

思路:由于要O(n)的复杂度,一次遍历就要把所需的信息标记出来.
对于每个位置的元素,把(其值-1)对应的位置的元素取反,对于每次取元素,取其绝对值
最后遍历,大于0的说明没有存在.


class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        for(int i =0;i<nums.length; i++){
            int index = Math.abs(nums[i])-1;
            nums[index]= -Math.abs(nums[index]);
        }
        List<Integer> a = new ArrayList();
        for(int i =0;i<nums.length; i++){
            if(nums[i]>0) a.add(i+1);
        }
        return a;
    }
}



