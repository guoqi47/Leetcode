Given a balanced parentheses string S, compute the score of the string based on the following rule:

() has score 1
AB has score A + B, where A and B are balanced parentheses strings.
(A) has score 2 * A, where A is a balanced parentheses string.
 

Example 1:

Input: "()"
Output: 1
Example 2:

Input: "(())"
Output: 2
Example 3:

Input: "()()"
Output: 2
Example 4:

Input: "(()(()))"
Output: 6
 


class Solution {
    public int scoreOfParentheses(String S) {
        
        //只用了一个stack,没有存'(',')',直接存数字
        Stack<Integer> s = new Stack();
        for(char c:S.toCharArray()){
            if(c=='('){
                s.push(-1);
                continue;
            }
            //查看堆栈顶部的对象，但不从堆栈中移除它
            int temp = s.peek();
            if(temp==-1){
                s.pop();
                s.push(1);
            }else{
                int tempSum=0;
                while(s.peek()>0) tempSum+=s.pop();
                s.pop();
                s.push(tempSum*2);
            }
            
        }
        int res=0;
        //不能用peek()方法判断stack是否为空
        while(!s.empty() && s.peek()>0) res+=s.pop();
        return res;
        
        
        //错误解法,没考虑到(()()())
//         Stack<Character> charStack = new Stack();
//         Stack<Integer> valueStack = new Stack();
//         boolean flag=true; //上一个字符是否是'('
//         valueStack.push(0);
        
//         for(char c:S.toCharArray()){
//             if(c=='('){
//                 charStack.push(c);
//                 flag = true;
//             }else{
//                 char newchar = charStack.pop();
//                 if(flag){
//                     int temp = valueStack.pop();
//                     valueStack.push(temp+1);
//                 }else{
//                     int temp = valueStack.pop();
//                     valueStack.push(temp*2);
//                 }
//                 flag = false;
//             }
//         }
        
//         return valueStack.pop();
        
    }
}
