Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.

Examples 1
Input:

  5
 /  \
2   -3
return [2, -3, 4], since all the values happen only once, return all of them in any order.
Examples 2
Input:

  5
 /  \
2   -5
return [2], since 2 happens twice, however -5 only occur once.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    //通过本题,对递归有了一点新的认识:递归调用的地方,是和其面对同一问题时.
    HashMap<Integer, Integer> map;
    int max = 0;
    public int[] findFrequentTreeSum(TreeNode root) {
        
        map = new HashMap<Integer,Integer> (); //和的值:该和的值出现的次数
        postOrder(root);
        
        ArrayList<Integer> result = new ArrayList<Integer> ();
        for(int res: map.keySet()){
            if(map.get(res) == max) result.add(res);
        }
        
        //ArrayList<Integer>要得到int[],只能用循环赋值来得到
        int[] res1 = new int[result.size()];
        for(int i=0;i<result.size();i++){
            res1[i]=result.get(i);
        }
        return res1;
        
    }
    public int postOrder(TreeNode root){
        //终止条件
        if(root==null) return 0;
        
        //每个节点和其左右节点是同一个问题,所以需要对其左右节点调用递归函数
        int left = postOrder(root.left);
        int right = postOrder(root.right);
        root.val += left+right;
        int sum = root.val;
        
        int count = map.getOrDefault(sum,0);
        map.put(sum,count+1);
        //获取最大的次数
        max = Math.max(max,count+1);
        
        return root.val;
    }
}
