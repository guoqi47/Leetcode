Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        //Use two pointers, walker and runner.
        // walker moves step by step. runner moves two steps at time.
        // if the Linked List has a cycle, 
        //walker and runner will meet at some point.
        if(head==null) return false;
        ListNode walker = head;
        ListNode runner = head;
        while(runner.next!=null && runner.next.next!=null){
            walker = walker.next;
            runner = runner.next.next;
            if(walker==runner) return true;
        }
        return false;
        
        // HashSet,用了空间
        // HashSet<ListNode> hashset = new HashSet<ListNode>();
        // while(head!=null){
        //     if(hashset.contains(head)) return true;
        //     hashset.add(head);
        //     head = head.next;
        // }
        // return false;
    }
}
