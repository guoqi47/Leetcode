Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.


class Solution {
    public String frequencySort(String s) {
        //use a map a count and according to the frequency to put it into the right bucket. 
        //Then we go through the bucket to get the most frequently character 
        //and append that to the final stringbuilder.
        
        HashMap<Character,Integer> map = new HashMap<Character,Integer> ();
        // map
        // for(Character c:s){ 错误
        for(Character c:s.toCharArray()){
            int count = map.getOrDefault(c,0);
            map.put(c,++count);
        }
        
        // bucket
        ArrayList<Character>[] bucket = new ArrayList[s.length()+1]; 
        // 一个存着ArrayList的数组, ArrayList<Integer>[]
        // 和 int [] a = new int[length] 一样,只不过把int换了
        for(Character c:map.keySet()){
            int count = map.get(c);
            if(bucket[count]==null) bucket[count] = new ArrayList();
            bucket[count].add(c);
            
        }
        
        // StringBuilder
        StringBuilder sb = new StringBuilder();
        for(int i=bucket.length-1;i>0;i--){
            if(bucket[i]!=null){
                for(Character c:bucket[i])
                    for(int j=0;j<i;j++) sb.append(c);
            }
        }
        return sb+"";
    }
}
//https://leetcode.com/problems/sort-characters-by-frequency/discuss/93420/Java-O(n)-Bucket-Sort-Solution-O(nlogn)-PriorityQueue-Solution-easy-to-understand
