Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.

Example 1:
Input:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
Explanation:
For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0


class Solution {
    //想不到这么简洁的处理方法
    public int[][] imageSmoother(int[][] M) {
        int m = M.length;
        int n = M[0].length;
        int res[][] = new int[m][n];
        for(int i =0;i<m;i++){
            for(int j=0; j<n; j++){
                res[i][j] = smooth(M,i,j);
            }
        }
        return res;
    }
    public int smooth(int[][] M,int i, int j){
        int m = M.length;
        int n = M[0].length;
        int count = 0,sum=0;
        for(int p=-1; p<=1; p++){
            for(int q=-1; q<=1; q++){
                if(i+p<0 || i+p>=m || j+q<0 || j+q>=n) continue; //不满足条件的就continue
                else{
                    count++;
                    sum+=M[i+p][j+q];
                }
            }
        }
        return (int)(sum / count);
    }
}
