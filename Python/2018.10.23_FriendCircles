There are N students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.

Given a N*N matrix M representing the friend relationship between students in the class. If M[i][j] = 1, then the ith and jth students are direct friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.

Example 1:
Input: 
[[1,1,0],
 [1,1,0],
 [0,0,1]]
Output: 2
Explanation:The 0th and 1st students are direct friends, so they are in a friend circle. 
The 2nd student himself is in a friend circle. So return 2.
Example 2:
Input: 
[[1,1,0],
 [1,1,1],
 [0,1,1]]
Output: 1
Explanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, 
so the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.


class Solution:
    def findCircleNum(self, M):
        """
        :type M: List[List[int]]
        :rtype: int
        """
        
        
        # 解法二：交并集
        def find(p):
            return id[p]
        
        def union(p,q):
            for i in range(len(id)):
                if id[i]==find(p):
                    id[i]=find(q)
        
        # def count():
        #     return 
        
        id = [i for i in range(len(M))]
        count = 0
        for i in range(len(M)):
            for j in range(i):
                if M[i][j]==1 and not(find(i)==find(j)):
                    union(i,j)
                    
        return len(set(id))
                    
    # 解法三：直接调库
    # def findCircleNum(self, M):
    #     return scipy.sparse.csgraph.connected_components(M)[0]        
        
        # 解法一:DFS
#         def dfs(index,invited):
#             # for i in range(index,len(M)): 错误,要把第i个的朋友都遍历
#             for i in range(len(M)):
#                 if M[index][i]==1 and invited[i]==0: #要加上invited[i]==0，否则会无限循环
#                     invited[i]=1
#                     dfs(i,invited)
        
#         count=0
#         invited = [0]*len(M)
#         for i in range(len(M)):
#             if invited[i]==0:
#                 invited[i]=1
#                 count+=1
#                 dfs(i,invited)
#         return count

