We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).

Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.

Example 1:
Input: 
bits = [1, 0, 0]
Output: True
Explanation: 
The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.
Example 2:
Input: 
bits = [1, 1, 1, 0]
Output: False
Explanation: 
The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.
Note:

1 <= len(bits) <= 1000.
bits[i] is always 0 or 1.


思路:0是无论哪种情况的结束符,只看最后一段连续1的个数是奇数还是偶数即可

class Solution {
    
    public boolean isOneBitCharacter(int[] bits) {
        int count = 0;
        for(int i = bits.length-2;i>=0 && bits[i]==1;i--){
            count++;
        }
        if (count % 2 > 0) return false; 
        return true;
    }
    
    
    //A,思路大致一样,写的麻烦点.算最后一小段有几个连续的1,不如计数方便
//     public boolean isOneBitCharacter(int[] bits) {
//         int len = bits.length;
//         if (len==1) return true;
//         int index = 0;
//         for(int i = len-2;i>=0;i--){
//             if(bits[i]==0) { //这个条件可以直接放在for里啊
//                 index = i;
//                 break;
//             }
//             index = -1;
//         }
        
//         if((len-index-2)%2==0 ) return true;
//         return false;
//     }
}



