class Solution:
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        
        # 只看懂这一种方法
        # 对于这种列出所有结果的题首先还是考虑用递归来解
        # 对于这种括号的题目考虑一下left和right
        # 由于字符串只有左括号和右括号两种字符，而且最终结果必定是左括号3个，右括号3个，
        # 所以我们定义两个变量left和right分别表示剩余左右括号的个数，如果在某次递归时，
        # 左括号的个数大于右括号的个数，说明此时生成的字符串中右括号的个数大于左括号的个数，
        # 即会出现')('这样的非法串，所以这种情况直接返回，不继续处理。如果left和right都为0，
        # 则说明此时生成的字符串已有3个左括号和3个右括号，且字符串合法，则存入结果中后返回。
        # 如果以上两种情况都不满足，若此时left大于0，则调用递归函数，注意参数的更新，若right大于0，
        # 则调用递归函数，同样要更新参数。
        
#         res = []
#         self.helper(n,n,'',res)
#         return res
    
#     def helper(self,left,right,current,res):
#         if right<left or right<0 or left<0:
#             return
#         if right==0 and left==0:
#             res.append(current)
#             return
#         self.helper(left,right-1,current+')',res)
#         self.helper(left-1,right,current+'(',res)

# 上述方法只定义一个函数的解法
        # def helper(left,right,current,res):
        #     if right>=left and right>=0 and left>=0:
        #         if right==0 and left==0:
        #             res.append(current)   
        #         helper(left,right-1,current+')',res)
        #         helper(left-1,right,current+'(',res)
        #     return res
        # return helper(n,n,'',[])
