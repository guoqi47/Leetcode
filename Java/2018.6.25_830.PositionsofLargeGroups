In a string S of lowercase letters, these letters form consecutive groups of the same character.

For example, a string like S = "abbxxxxzyy" has the groups "a", "bb", "xxxx", "z" and "yy".

Call a group large if it has 3 or more characters.  We would like the starting and ending positions of every large group.

The final answer should be in lexicographic order.

 

Example 1:

Input: "abbxxxxzzy"
Output: [[3,6]]
Explanation: "xxxx" is the single large group with starting  3 and ending positions 6.
Example 2:

Input: "abc"
Output: []
Explanation: We have "a","b" and "c" but no large group.
Example 3:

Input: "abcdddeeeeaabbbcd"
Output: [[3,5],[6,9],[12,14]]


class Solution {
    public List<List<Integer>> largeGroupPositions(String S) {
        List<List<Integer>> res = new ArrayList();
        int i = 0, j = 1, N = S.length();
        while(i<N){
            while(j<N && S.charAt(i)==S.charAt(j)) j++;
            if(j-i>=3) res.add(Arrays.asList(i,j-1));
            i=j;
        }
        return res;
        
        
        
        //A,List<List<Integer>> res = new ArrayList()的声明和S.charAt(i)的使用;没有别人的答案精巧
//         List<List<Integer>> res = new ArrayList();
//         int count = 1;
//         char current=S.charAt(0);
//         for(int i=1;i<S.length();i++){
//             if(S.charAt(i)==current) {
//                 count++;
//                 if(i==S.length()-1){
//                     if(count>=3) res.add(Arrays.asList(i-count+1,i));
//                     return res;
//                 }
//             }
//             else {
//                 if(count>=3) res.add(Arrays.asList(i-count,i-1));
//                 count=1;
//                 current = S.charAt(i);
                
//             }
//         }
//         return res;
    }
}
