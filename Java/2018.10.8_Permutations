Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

from itertools import combinations, permutations
class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        # 直接实现
        perms = [[]]
        for num in nums:
            new_perms=[]
            for perm in perms:
                for i in range(len(perm)+1):
                    temp_perm = perm[:i]+[num]+perm[i:]
                    new_perms.append(temp_perm)
            perms = new_perms 
        return perms
                
        
        
        # A,调用接口,一行
        # return list(permutations(nums,len(nums)))
        #https://blog.csdn.net/lanchunhui/article/details/51824602
        
        
        # 整理好的一个相关习题集 
        # https://leetcode.com/problems/permutations/discuss/18239/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partioning)
