class Solution:
    def combinationSum3(self, k, n):
        """
        :type k: int
        :type n: int
        :rtype: List[List[int]]
        """
        # https://leetcode.com/problems/combination-sum-iii/discuss/60631/Fast-easy-Java-code-with-explanation!
        # Java remove(int index)
        
        def helper(res,tempList, k, target, start):
            if k<0 or target<0:
                return

            if k==0 and target==0:
                res.append(tempList)
                return
                
            else:
                for i in range(start,10):
                    print(tempList+[i])
                    helper(res,tempList+[i],k-1,target-i,i+1)
             
            
        
        res = []
        helper(res,[],k,n,1)
        return res

# 思路：从1到9分别一个分支，自己去探索   
# 运行结果   
# [1]
# [1, 2]
# [1, 2, 3]
# [1, 2, 3, 4]
# [1, 2, 3, 5]
# [1, 2, 3, 6]
# [1, 2, 3, 7]
# [1, 2, 3, 8]
# [1, 2, 3, 9]
# [1, 2, 4]
# [1, 2, 5]
# [1, 2, 6]
# [1, 2, 7]
# [1, 2, 8]
# [1, 2, 9]
# [1, 3]
# [1, 3, 4]
# [1, 3, 5]
# [1, 3, 6]
# [1, 3, 7]
# [1, 3, 8]
# [1, 3, 9]
# [1, 4]
# [1, 4, 5]
# [1, 4, 6]
# [1, 4, 7]
# [1, 4, 8]
# [1, 4, 9]
# [1, 5]
# [1, 5, 6]
# [1, 5, 7]
# [1, 5, 8]
# [1, 5, 9]
# [1, 6]
# [1, 6, 7]
# [1, 6, 8]
# [1, 6, 9]
# [1, 7]
# [1, 8]
# [1, 9]
# [2]
# [2, 3]
# [2, 3, 4]
# [2, 3, 5]
# [2, 3, 6]
# [2, 3, 7]
# [2, 3, 8]
# [2, 3, 9]
# [2, 4]
# [2, 4, 5]
# [2, 4, 6]
# [2, 4, 7]
# [2, 4, 8]
# [2, 4, 9]
# [2, 5]
# [2, 5, 6]
# [2, 5, 7]
# [2, 5, 8]
# [2, 5, 9]
# [2, 6]
# [2, 7]
# [2, 8]
# [2, 9]
# [3]
# [3, 4]
# [3, 4, 5]
# [3, 4, 6]
# [3, 4, 7]
# [3, 4, 8]
# [3, 4, 9]
# [3, 5]
# [3, 6]
# [3, 7]
# [3, 8]
# [3, 9]
# [4]
# [4, 5]
# [4, 6]
# [4, 7]
# [4, 8]
# [4, 9]
# [5]
# [5, 6]
# [5, 7]
# [5, 8]
# [5, 9]
# [6]
# [6, 7]
# [6, 8]
# [6, 9]
# [7]
# [7, 8]
# [7, 9]
# [8]
# [9]