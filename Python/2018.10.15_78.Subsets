Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

import copy 
class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        # bit解法
        # 基本的想法是，用bit位来表示这一位的number要不要取，第一位有1，0即取和不取2种可能性。
        # 所以只要把0到N种可能都用bit位表示，再把它转化为数字集合，就可以了。
        res=[]
        for i in range(1<<len(nums)):
            new=[]
            for j in range(len(nums)):
                if i & 1<<j:
                    new.append(nums[j])
            res.append(new)
        return res
        
        
        # 迭代
        # res = [[]]
        # for num in nums:
        #     res += [i+[num] for i in res]
        # return res
    
    # https://leetcode.com/problems/subsets/discuss/27301/Python-easy-to-understand-solutions-(DFS-recursively-Bit-Manipulation-Iteratively).
