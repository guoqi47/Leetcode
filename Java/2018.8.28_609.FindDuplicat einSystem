Given a list of directory info including directory path, and all the files with contents in this directory, you need to find out all the groups of duplicate files in the file system in terms of their paths.

A group of duplicate files consists of at least two files that have exactly the same content.

A single directory info string in the input list has the following format:

"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)"

It means there are n files (f1.txt, f2.txt ... fn.txt with content f1_content, f2_content ... fn_content, respectively) in directory root/d1/d2/.../dm. Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory.

The output is a list of group of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:

"directory_path/file_name.txt"

Example 1:
Input:
["root/a 1.txt(abcd) 2.txt(efgh)", "root/c 3.txt(abcd)", "root/c/d 4.txt(efgh)", "root 4.txt(efgh)"]
Output:  
[["root/a/2.txt","root/c/d/4.txt","root/4.txt"],["root/a/1.txt","root/c/3.txt"]]


import java.util.regex.Matcher;
import java.util.regex.Pattern;
class Solution {
    public List<List<String>> findDuplicate(String[] paths) {
        //参考
        //substring,一个参数是beginIndex,两个参数是beginIndex, endIndex
        //getOrDefault(Object key,V defaultValue) Returns the value to which the specified key is mapped, or defaultValue if   
        //this map contains no mapping for the key.
        HashMap<String,ArrayList<String>> map = new HashMap();
        for(String path:paths){
            String[] s = path.split(" ");
            for(int i=1;i<s.length;i++){
                int temp = s[i].indexOf('(');
                String key = s[i].substring(temp+1,s[i].length()-1);
                ArrayList<String> newList = new ArrayList<String>();
                ArrayList a = map.getOrDefault(key, newList);
                a.add(s[0]+"/"+s[i].substring(0,temp));
                map.put(key,a);
            }
        }
        
        
        //A,用了正则,可以像参考答案一样不用
//         ArrayList<String> path = new ArrayList<String>(Arrays.asList(paths));
// 		HashMap<String, ArrayList> map = new HashMap<String, ArrayList>();
// 		Pattern pattern=Pattern.compile("(?<=\\()[^\\)]+"); //匹配括号中的内容,正则表达式内部不能有空格
// 		for(String str:path) {
// 			String[] res = str.split(" ");
// 			for(int i=1;i<res.length;i++) {
// 				Matcher matcher=pattern.matcher(res[i]);
// 				if(matcher.find()) {
// //					System.out.println(matcher.group());

// 					String content = matcher.group();
// 					int index = res[i].indexOf('(');
// 					if(map.containsKey(content)) {
// 						map.get(content).add(res[0]+"/"+res[i].substring(0, index));
// 					}else {
// 						ArrayList newArrayList = new ArrayList();
// 						newArrayList.add(res[0]+"/"+res[i].substring(0, index));
// 						map.put(content, newArrayList);
// 					}
// 				}
// 			}
			
// 		}
        //自己写的后半段可以复用
		List<List<String>> result = new ArrayList<List<String>>(); 
        //要返回List<List<String>>这个类型,
        //声明时就要声明成List<List<String>>类型
        //https://stackoverflow.com/questions/12861726/why-cant-you-have-a-listliststring-in-java
		for(ArrayList a:map.values()) {
            if(a.size()<2) continue;
            result.add(a);
        }

		return result;
    }
}
