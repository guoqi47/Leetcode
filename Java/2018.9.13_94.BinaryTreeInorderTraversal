Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<Integer> res = new ArrayList<Integer>();
    public List<Integer> inorderTraversal(TreeNode root) {
//         //递归版
//         inorder(root);
//         return res;
//     }
    
//     public void inorder(TreeNode root){
//         if(root!=null){
//             inorder(root.left);
//             res.add(root.val);
//             inorder(root.right);
//         }    
//     }
        //迭代版,看discuss
        //中序遍历需要访问完左节点返回来访问其根节点,所以要用到stack
        Stack<TreeNode> stack = new Stack<TreeNode>();
        List<Integer> l = new ArrayList<Integer>();
        int count=0;
        while(!stack.empty() || root!=null){
            while(root!=null){ // 一开始用的root.left != null,写不出来.
            //后来看,既然该循环最后一句是.left,条件就不用.left了
                stack.push(root);
                root = root.left;
            }
            TreeNode temp = stack.pop();
            l.add(temp.val);
            root=temp.right;
        }
        return l;
        
    }
}
